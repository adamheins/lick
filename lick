#!/usr/bin/env python

from __future__ import print_function

import argparse
import json
import os
import re
import requests
from datetime import date

LICENSES = ['APACHE', 'MIT', 'BSD-2-CLAUSE', 'BSD-3-CLAUSE']
LICENSE_ROOT_URL = 'https://raw.githubusercontent.com/adamheins/lick/master/licenses'

def load_properties(req_props):
    """ Load the values of the required properties to fill out the license. """
    properties = {}

    # First, check for a file pointed to $LICK_PROPERTIES_FILE_PATH.
    # If that does not exist, attempt to load the default config at
    # ~/.lick.json.
    fp = os.environ.get('LICK_PROPERTIES_FILE_PATH')
    if fp is not None:
        try:
            with open(fp) as f:
                properties.update(json.load(f))
        except ValueError:
            print("lick properties file at '{}' contains malformed JSON"
                  .format(fp))
    else:
        default_file_path = os.path.expanduser('~/.lick.json')
        try:
            with open(default_file_path) as f:
                properties.update(json.load(f))
        except IOError:
            pass
        except ValueError:
            print("lick properties file at '{}' contains malformed JSON"
                  .format(default_file_path))

    # Use the current error if is hasn't already been defined.
    if 'year' in req_props and 'year' not in properties.keys():
        properties['year'] = str(date.today().year)

    # Get the rest of the required properties from terminal input.
    for prop in (set(req_props) - set(properties.keys())):
        properties[prop] = raw_input('{}: '.format(prop))
    return properties

def parse_required_properties(text):
    """ Parse which properties are required to fill out the license. """
    return set(re.findall(r'<(\S+)>', text))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('type', nargs='?', help='Type of license to use.')
    parser.add_argument('-l', '--list', help='List all available licenses.',
                        action='store_true')
    args = parser.parse_args()

    if args.list:
        for li in LICENSES:
            print(li)
        return

    license = args.type.upper()
    if license not in LICENSES:
        print('Unsupported license: {}.'.format(args.type))
        return

    print('Licking {}...'.format(license))
    url = '/'.join([LICENSE_ROOT_URL, license])
    req = requests.get(url)
    if req.status_code != 200:
        print('Error: {} {}'.format(req.status_code, req.text))
        return

    text = req.text
    req_props = parse_required_properties(text)
    properties = load_properties(req_props)
    print(properties)

    for prop in properties:
        text = text.replace('<' + prop + '>', properties[prop])

    with open('LICENSE', 'w') as license:
        license.write(text)

if __name__ == '__main__':
    main()
